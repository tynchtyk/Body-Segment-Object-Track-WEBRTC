{"version":3,"sources":["webrtc.js"],"names":["remoteVideo","document","getElementById","canvas","localStream","bodyPixNet","animationId","contineuAnimation","bodyPixMaks","segmentTimerId","maskType","loadModel","bodyPix","load","net","console","log","updateSegment","segmeteUpdateTime","warn","segmentPerson","then","segmentation","foregroundColor","r","g","b","a","backgroundColor","personPartImage","toMask","setTimeout","catch","err","error","drawCanvas","srcElement","opacity","flipHorizontal","maskBlurAmount","drawMask","updateCanvas","window","requestAnimationFrame","writeCanvasString","str","ctx","getContext","font","fillText","startCanvasVideo","startVideo","mediaConstraints","video","width","height","audio","navigator","mediaDevices","getUserMedia","srcObject","play","volume"],"mappings":"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","file":"webrtc.f9d0e5f3.js","sourceRoot":"..","sourcesContent":["    const remoteVideo = document.getElementById('remote_video');\n    const canvas = document.getElementById('canvas');\n\n    let localStream = null;\n\n    let bodyPixNet = null;\n    let animationId = null;\n    let contineuAnimation = false;\n    let bodyPixMaks = null;\n    let segmentTimerId = null;\n    let maskType = 'room';\n\n    // ------- bodypix -------\n    async function loadModel() {\n      const net = await bodyPix.load(/** optional arguments, see below **/);\n      bodyPixNet = net;\n      console.log('bodyPix ready');\n    }\n    loadModel();\n\n    function updateSegment() {\n      const segmeteUpdateTime = 10; // ms\n      if (!bodyPixNet) {\n        console.warn('bodyPix net NOT READY');\n        return;\n      }\n      bodyPixNet.segmentPerson(remoteVideo)\n        .then(segmentation => {\n          const foregroundColor = {r: 255, g: 255, b: 255, a: 255};\n          const backgroundColor = {r: 0, g: 0, b: 0, a: 255};\n          const personPartImage = bodyPix.toMask(segmentation, foregroundColor, backgroundColor);\n          bodyPixMaks = personPartImage;\n          \n\n          if (contineuAnimation) {\n            segmentTimerId = setTimeout(updateSegment, segmeteUpdateTime);\n          }\n        })\n        .catch(err => {\n          console.error('segmentPerson ERROR:', err);\n        })\n    }\n\n    \n    function drawCanvas(srcElement) {\n      const opacity = 1.0;\n      const flipHorizontal = false;\n      //const maskBlurAmount = 0;\n      const maskBlurAmount = 3;\n      bodyPix.drawMask(\n        canvas, srcElement, bodyPixMaks, opacity, maskBlurAmount,\n        flipHorizontal\n      );\n    }\n\n    function updateCanvas() {\n      drawCanvas(remoteVideo);\n      if (contineuAnimation) {\n        animationId = window.requestAnimationFrame(updateCanvas);\n      }\n    }\n\n\n    function writeCanvasString(str) {\n      const ctx = canvas.getContext('2d');\n      ctx.font = \"64px serif\";\n      ctx.fillText(str, 5, 100);\n      console.log(str);\n    }\n\n\n    function startCanvasVideo() {\n      writeCanvasString('initalizing BodyPix');\n      contineuAnimation = true;\n      animationId = window.requestAnimationFrame(updateCanvas);\n\n      updateSegment();\n    }\n\n    // -------- user media -----------\n\n    async function startVideo() {\n      const mediaConstraints = { video: { width: 640, height: 480 }, audio: false };\n\n      localStream = await navigator.mediaDevices.getUserMedia(mediaConstraints).catch(err => {\n        console.error('media ERROR:', err);\n        return;\n      });\n\n      remoteVideo.srcObject = localStream;\n      await remoteVideo.play().catch(err => console.error('local play ERROR:', err));\n      remoteVideo.volume = 0;\n\n      startCanvasVideo();\n    }"]}